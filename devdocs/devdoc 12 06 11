I've basically completed the collision detection library for python. I was about to start work on the java one when I realized that I need unit tests. I'm going to be having large numbers of functions running through 6 different implementations. 3 of the languages I don't know yet. Can you say bug prone? To counter act this I decided the best idea was to describe unit tests in json. This means that I'm adding to the specification that every data type has to be able to parse itself in from a json string, this will allow data to be loaded with loaders local to the data type which will keep the load function near the data type. 

the json unit testing allows me a couple advantages. for one, I think I'll be able to genericly describe a unit testing program in python because of its meta-code capabilities. And any other of the languages that have meta-code facilities for that matter. Second, json is a data description language, but I'll be able to toy around with it a little to describe tests appropriately and link them up to the associated methods. and lastly this will create easy ways to load data in for other uses as well as each data type will know how to read in itself from json. that will be handy!
